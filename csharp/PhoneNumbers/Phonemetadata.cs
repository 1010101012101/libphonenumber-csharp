// This file was generated by a tool; you should avoid making direct changes.
// Consider using 'partial classes' to extend these types
// Input: my.proto

using System.Collections.Generic;

#pragma warning disable CS1591, CS0612, CS3021, IDE1006
namespace PhoneNumbers
{

    public partial class NumberFormat
    {

        public string Pattern { get; set; }

        public string Format { get; set; }

        public List<string> LeadingDigitsPatterns { get; } = new List<string>();

        public string NationalPrefixFormattingRule
        {
            get { return __pbn__NationalPrefixFormattingRule ?? ""; }
            set { __pbn__NationalPrefixFormattingRule = value; }
        }

        public bool ShouldSerializeNationalPrefixFormattingRule() => __pbn__NationalPrefixFormattingRule != null;
        public void ResetNationalPrefixFormattingRule() => __pbn__NationalPrefixFormattingRule = null;
        private string __pbn__NationalPrefixFormattingRule;

        public bool NationalPrefixOptionalWhenFormatting
        {
            get { return __pbn__NationalPrefixOptionalWhenFormatting ?? false; }
            set { __pbn__NationalPrefixOptionalWhenFormatting = value; }
        }

        public bool ShouldSerializeNationalPrefixOptionalWhenFormatting() =>
            __pbn__NationalPrefixOptionalWhenFormatting != null;

        public void ResetNationalPrefixOptionalWhenFormatting() =>
            __pbn__NationalPrefixOptionalWhenFormatting = null;

        private bool? __pbn__NationalPrefixOptionalWhenFormatting;

        public string DomesticCarrierCodeFormattingRule
        {
            get { return __pbn__DomesticCarrierCodeFormattingRule ?? ""; }
            set { __pbn__DomesticCarrierCodeFormattingRule = value; }
        }

        public bool ShouldSerializeDomesticCarrierCodeFormattingRule() =>
            __pbn__DomesticCarrierCodeFormattingRule != null;

        public void ResetDomesticCarrierCodeFormattingRule() => __pbn__DomesticCarrierCodeFormattingRule = null;
        private string __pbn__DomesticCarrierCodeFormattingRule;

        public NumberFormat MergeFrom(NumberFormat numberFormat)
        {
            DomesticCarrierCodeFormattingRule = numberFormat.DomesticCarrierCodeFormattingRule;
            Format = numberFormat.Format;
            NationalPrefixFormattingRule = numberFormat.NationalPrefixFormattingRule;
            NationalPrefixOptionalWhenFormatting = numberFormat.NationalPrefixOptionalWhenFormatting;
            Pattern = numberFormat.Pattern;
            LeadingDigitsPatterns.AddRange(numberFormat.LeadingDigitsPatterns);
            return this;
        }
    }

    public partial class PhoneNumberDesc
    {

        public string NationalNumberPattern
        {
            get { return __pbn__NationalNumberPattern; }
            set { __pbn__NationalNumberPattern = value; }
        }

        public bool ShouldSerializeNationalNumberPattern() => __pbn__NationalNumberPattern != null;
        public void ResetNationalNumberPattern() => __pbn__NationalNumberPattern = null;
        private string __pbn__NationalNumberPattern;

        public List<int> PossibleLengths = new List<int>();

        public List<int> PossibleLengthsLocalOnly = new List<int>();

        public string ExampleNumber
        {
            get { return __pbn__ExampleNumber; }
            set { __pbn__ExampleNumber = value; }
        }

        public bool ShouldSerializeExampleNumber() => __pbn__ExampleNumber != null;
        public void ResetExampleNumber() => __pbn__ExampleNumber = null;
        private string __pbn__ExampleNumber;

        internal PhoneNumberDesc MergeFrom(PhoneNumberDesc phoneNumberDesc)
        {
            NationalNumberPattern = phoneNumberDesc.NationalNumberPattern;
            PossibleLengths = new List<int>(phoneNumberDesc.PossibleLengths);
            PossibleLengthsLocalOnly = new List<int>(phoneNumberDesc.PossibleLengthsLocalOnly);
            ExampleNumber = phoneNumberDesc.ExampleNumber;
            return this;
        }

    }

    public partial class PhoneMetadata
    {

        public PhoneNumberDesc GeneralDesc { get; set; }

        public PhoneNumberDesc FixedLine { get; set; }

        public PhoneNumberDesc Mobile { get; set; }

        public PhoneNumberDesc TollFree { get; set; }

        public PhoneNumberDesc PremiumRate { get; set; }

        public PhoneNumberDesc SharedCost { get; set; }

        public PhoneNumberDesc PersonalNumber { get; set; }

        public PhoneNumberDesc Voip { get; set; }

        public PhoneNumberDesc Pager { get; set; }

        public PhoneNumberDesc Uan { get; set; }

        public PhoneNumberDesc Emergency { get; set; }

        public PhoneNumberDesc Voicemail { get; set; }

        public PhoneNumberDesc ShortCode { get; set; }

        public PhoneNumberDesc StandardRate { get; set; }

        public PhoneNumberDesc CarrierSpecific { get; set; }

        public PhoneNumberDesc SmsServices { get; set; }

        public PhoneNumberDesc NoInternationalDialling { get; set; }

        public string Id { get; set; }

        public int CountryCode
        {
            get { return __pbn__CountryCode.GetValueOrDefault(); }
            set { __pbn__CountryCode = value; }
        }

        public bool ShouldSerializeCountryCode => __pbn__CountryCode != null;
        public void ResetCountryCode() => __pbn__CountryCode = null;
        private int? __pbn__CountryCode;

        public string InternationalPrefix
        {
            get { return __pbn__InternationalPrefix; }
            set { __pbn__InternationalPrefix = value; }
        }

        public bool ShouldSerializeInternationalPrefix() => __pbn__InternationalPrefix != null;
        public void ResetInternationalPrefix() => __pbn__InternationalPrefix = null;
        private string __pbn__InternationalPrefix;

        public string PreferredInternationalPrefix
        {
            get { return __pbn__PreferredInternationalPrefix; }
            set { __pbn__PreferredInternationalPrefix = value; }
        }

        public bool ShouldSerializePreferredInternationalPrefix() => __pbn__PreferredInternationalPrefix != null;
        public void ResetPreferredInternationalPrefix() => __pbn__PreferredInternationalPrefix = null;
        private string __pbn__PreferredInternationalPrefix;

        public string NationalPrefix
        {
            get { return __pbn__NationalPrefix; }
            set { __pbn__NationalPrefix = value; }
        }

        public bool ShouldSerializeNationalPrefix() => __pbn__NationalPrefix != null;
        public void ResetNationalPrefix() => __pbn__NationalPrefix = null;
        private string __pbn__NationalPrefix;

        public string PreferredExtnPrefix
        {
            get { return __pbn__PreferredExtnPrefix ?? ""; }
            set { __pbn__PreferredExtnPrefix = value; }
        }

        public bool ShouldSerializePreferredExtnPrefix() => __pbn__PreferredExtnPrefix != null;
        public void ResetPreferredExtnPrefix() => __pbn__PreferredExtnPrefix = null;
        private string __pbn__PreferredExtnPrefix;

        public string NationalPrefixForParsing
        {
            get { return __pbn__NationalPrefixForParsing ?? ""; }
            set { __pbn__NationalPrefixForParsing = value; }
        }

        public bool ShouldSerializeNationalPrefixForParsing() => __pbn__NationalPrefixForParsing != null;
        public void ResetNationalPrefixForParsing() => __pbn__NationalPrefixForParsing = null;
        private string __pbn__NationalPrefixForParsing;

        public string NationalPrefixTransformRule
        {
            get { return __pbn__NationalPrefixTransformRule ?? ""; }
            set { __pbn__NationalPrefixTransformRule = value; }
        }

        public bool ShouldSerializeNationalPrefixTransformRule() => __pbn__NationalPrefixTransformRule != null;
        public void ResetNationalPrefixTransformRule() => __pbn__NationalPrefixTransformRule = null;
        private string __pbn__NationalPrefixTransformRule;

        public bool SameMobileAndFixedLinePattern
        {
            get { return __pbn__SameMobileAndFixedLinePattern ?? false; }
            set { __pbn__SameMobileAndFixedLinePattern = value; }
        }

        public bool ShouldSerializeSameMobileAndFixedLinePattern() => __pbn__SameMobileAndFixedLinePattern != null;
        public void ResetSameMobileAndFixedLinePattern() => __pbn__SameMobileAndFixedLinePattern = null;
        private bool? __pbn__SameMobileAndFixedLinePattern;

        public List<NumberFormat> NumberFormats { get; } =
            new List<NumberFormat>();

        public List<NumberFormat> IntlNumberFormats { get; } =
            new List<NumberFormat>();

        public bool MainCountryForCode
        {
            get { return __pbn__MainCountryForCode ?? false; }
            set { __pbn__MainCountryForCode = value; }
        }

        public bool ShouldSerializeMainCountryForCode() => __pbn__MainCountryForCode != null;
        public void ResetMainCountryForCode() => __pbn__MainCountryForCode = null;
        private bool? __pbn__MainCountryForCode;

        public string LeadingDigits
        {
            get { return __pbn__LeadingDigits ?? ""; }
            set { __pbn__LeadingDigits = value; }
        }

        public bool ShouldSerializeLeadingDigits() => __pbn__LeadingDigits != null;
        public void ResetLeadingDigits() => __pbn__LeadingDigits = null;
        private string __pbn__LeadingDigits;

        public bool LeadingZeroPossible
        {
            get { return __pbn__LeadingZeroPossible ?? false; }
            set { __pbn__LeadingZeroPossible = value; }
        }

        public bool ShouldSerializeLeadingZeroPossible() => __pbn__LeadingZeroPossible != null;
        public void ResetLeadingZeroPossible() => __pbn__LeadingZeroPossible = null;
        private bool? __pbn__LeadingZeroPossible;

        public bool MobileNumberPortableRegion
        {
            get { return __pbn__MobileNumberPortableRegion ?? false; }
            set { __pbn__MobileNumberPortableRegion = value; }
        }

        public bool ShouldSerializeMobileNumberPortableRegion() => __pbn__MobileNumberPortableRegion != null;
        public void ResetMobileNumberPortableRegion() => __pbn__MobileNumberPortableRegion = null;
        private bool? __pbn__MobileNumberPortableRegion;

        public PhoneMetadata MergeFrom(PhoneMetadata phoneMetadata)
        {
            GeneralDesc = new PhoneNumberDesc().MergeFrom(phoneMetadata.GeneralDesc);
            FixedLine = new PhoneNumberDesc().MergeFrom(phoneMetadata.FixedLine);
            Mobile = new PhoneNumberDesc().MergeFrom(phoneMetadata.Mobile);
            TollFree = new PhoneNumberDesc().MergeFrom(phoneMetadata.TollFree);
            PremiumRate = new PhoneNumberDesc().MergeFrom(phoneMetadata.PremiumRate);
            SharedCost = new PhoneNumberDesc().MergeFrom(phoneMetadata.SharedCost);
            PersonalNumber = new PhoneNumberDesc().MergeFrom(phoneMetadata.PersonalNumber);
            Voip = new PhoneNumberDesc().MergeFrom(phoneMetadata.Voip);
            Pager = new PhoneNumberDesc().MergeFrom(phoneMetadata.Pager);
            Uan = new PhoneNumberDesc().MergeFrom(phoneMetadata.Uan);
            Emergency = new PhoneNumberDesc().MergeFrom(phoneMetadata.Emergency);
            Voicemail = new PhoneNumberDesc().MergeFrom(phoneMetadata.Voicemail);
            ShortCode = new PhoneNumberDesc().MergeFrom(phoneMetadata.ShortCode);
            StandardRate = new PhoneNumberDesc().MergeFrom(phoneMetadata.StandardRate);
            CarrierSpecific = new PhoneNumberDesc().MergeFrom(phoneMetadata.CarrierSpecific);
            SmsServices = new PhoneNumberDesc().MergeFrom(phoneMetadata.SmsServices);
            NoInternationalDialling = new PhoneNumberDesc().MergeFrom(phoneMetadata.NoInternationalDialling);
            Id = phoneMetadata.Id;
            CountryCode = phoneMetadata.CountryCode;
            InternationalPrefix = phoneMetadata.InternationalPrefix;
            PreferredInternationalPrefix = phoneMetadata.PreferredInternationalPrefix;
            NationalPrefix = phoneMetadata.NationalPrefix;
            PreferredExtnPrefix = phoneMetadata.PreferredExtnPrefix;
            NationalPrefixForParsing = phoneMetadata.NationalPrefixForParsing;
            NationalPrefixTransformRule = phoneMetadata.NationalPrefixTransformRule;
            SameMobileAndFixedLinePattern = phoneMetadata.SameMobileAndFixedLinePattern;
            MainCountryForCode = phoneMetadata.MainCountryForCode;
            LeadingDigits = phoneMetadata.LeadingDigits;
            LeadingZeroPossible = phoneMetadata.LeadingZeroPossible;
            MobileNumberPortableRegion = phoneMetadata.MobileNumberPortableRegion;
            return this;
        }
    }

    public partial class PhoneMetadataCollection
    {

        public List<PhoneMetadata> Metadata { get; } = new List<PhoneMetadata>();

    }

}

#pragma warning restore CS1591, CS0612, CS3021, IDE1006
